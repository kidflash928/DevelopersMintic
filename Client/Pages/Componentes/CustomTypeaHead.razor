@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using System.Timers;

@typeparam TItem

<style type="text/css">
.blazored-typeahead{
    position: relative;
    width: 100%;
    border: 1px solid #bfbfbf;
    border-radius: 5px;
}
    .blazored-typeahead.valid.modified{
        outline: none !important;
        border: 1px solid #26b050;
    }

    .blazored-typeahead.invalid{
        outline: none !important;
        border: 1px solid red;
    }
    .blazored-typeahead__controls{
        position: relative;
        cursor: text;
        display: flex;
    }
    .blazored-typeahead__input{
        flex: 1;
        max-width: 100%;
        border: none;
        padding: .5rem;
        border-radius: 5px;
    }
    .blazored-typeahead:focus-within {
        box-shadow: 0 0 0 0.2rem rgba (38,143,255,.5);
    }
    .blazored-typeahead__input:focus{
        outline: none;
    }
    .blazored-typeahead__input-multi:focus{
        outline: none;
        box-shadow: none;
    }
    .blazored-typehead__input-hidden{
        display: none;
    }
    .invalid{
        border-color: red !important;
    }
    .blazored-typeahead__input-mask-wrapper{
        display: flex;
        width: 100%
    }
    .blazored-typeahead__input-multiselect-wrapper{
        display: flex;
        flex-direction: row;
        width: 100%;
        flex-wrap: wrap;
    }
    .blazored-typeahead__input-mask-wrapper--disabled{
        background-color: #e9ecef;
        cursor: not-allowed;
        border-radius: 5px 0 0 5px;
        color: grey;
        min-height: 40px;
    }
    .blazored-typeahead__input-mask-wrapper--disabled:focus{
        border: none;
    }
    .blazored-typeahead__input-mask{
        display: flex;
        align-items: center;
        flex: 1;
        border-radius: 5px 0 0 5px;
        padding: .5rem;
    }
    .blazored-typeahead__input-mask:focus{
        outline: none;
    }
    .blazored-typeahead_clear{
        width: 40px;
        display: flex;
        padding: .5rem;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: #dbdbdb;
    }

    .blazored-typeahead__clear:hover{
        color: #333333;
    }
    .blazored-typeahead__down-arrow path{
        fill: #dbdbdb;
    }
    .blazored-typeahead__input-icon{
        width: 40px;
        display: flex;
        border-radius: 0 5px 5px 0;
        padding: .5rem;
        cursor: pointer;
        background: none;
    }
    .blazored-typeahead__input-icon:focus{
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(38,143,255,.5);
    }
    .blazored-typeahead__input-icon:hover{
        background-color: #f5f5f5;
    }
    .blazored-typeahead__input-icon:hover .blazored-typeahead_down-arrow path{
        fill: #333333;
    }
    .blazored-typeahead__input-icon--disabled,
    .blazored-typeahead__input-icon--disabled:hover{
        background-color: #e9ecef;
        cursor: not-allowed;
    }
    .blazored-typeahead__input-icon--disabled .blazored-typeahead__down-arrow path,
    .blazored-typeahead__input-icon--disabled:hover
    .blazored-typeahead__down-arrow path{
        fill: #9c9c9c;
    }
    .blazored-typeahead_multi-value
    {
        background-color: #dbdbdb;
        display: flex;
        align-items: center;
        min-width: 0px;
        box-sizing: border-box;
        border-radius: 2px;
        margin: .4rem 0 .4rem .4rem;
    }
    .blazored-typeahead__multi-value-label{
        color: rgb(51,51,51);
        font-size: 85%;
        text-overflow: ellipsis;
        white-space: nowrap;
        box-sizing: border-box;
        border-radius: 2px;
        overflow: hidden;
        padding: 3px 3px 3px 6px;
    }
    .blazored-typeahead__multi-value-clear{
        -webkit-box-align: center;
        align-items: center;
        display: flex;
        padding-left: 4px;
        padding-right: 4px;
        box-sizing: border-box;
        border-radius: 2px;
        background-color: transparent;
        border: 0;
        outline: none;
    }
    .blazored-typeahead__multi-value-clear:focus{
        outline: none;
    }
    .blazored-typeahead__multi-value-clear:hover{
        background-color: rgb(212,212,212);
        color: rgb(222, 53, 11);
    }
    .blazored-typeahead__results{
        position: absolute;
        box-shadow: 0 5px 10px rgba(0,0,0,.2);
        border: 1px solid #dbdbdb;
        min-height: 2rem;
        max-height: 30rem;
        overflow-y: auto;
        z-index: 10;
        width: 100%;
        background: #fff;
    }
    .blazored-typeahead__result,
    .blazored-typeahead__notfound,
    .blazored-typeahead__results-help-template,
    .blazored-typeahead__results-header,
    .blazored-typeahead__results-footer{
        padding: .5rem;
        border-top: 1px solid #fff;
        border-bottom: 1px solid #fff;
    }
    .blazored-typeahead__selected-item{
        background-color: #dbdbdb;
    }
    .blazored-typeahead_selected-item-highlighted{
        background color: #d3e2f2;
    }
    .blazored-typeahead__active-item,
    .blazored-typeahead__result:hover,
    .blazored-typeahead_result:focus{
        background-color: #007bff;
        border-top: 1px solid #007bff;
        border-bottom: 1px solid #007bff;
        color: #fff;
        cursor: pointer;
    }
    .blazored-typeahead__loader{
        width: 24px;
        height: 24px;
        background-color: #333;
        border-radius: 100%;
        -webkit-animation: sk-scaleout 1.0s infinite ease-in-out;
        animation: sk-scaleout 1.0s infinite ease-in-out;
    }
</style>

<div class="blazored-typeahead" @ref="typeahead">
    <div class="blazored-typeahead__controls">
        <input @ref="searchInput"
            class="blazored-typeahead__input"
            @bind-value="@SearchText"
            @bind-value:event="oninput"
            @onclick="@ShowSuggestions"
            type="text"
            autocomplete="off"
            placeholder="@Placeholder"/>
    </div>
    @if (ShouldShowSuggestions())
    {
        <div class="blazored-typeahead_results">
            @foreach (var item in Suggestions)
            {
                <div @key="item" class="blazored-typeahead__result @GetSelectedSuggestionClass(item)"
                    tabindex="0"
                    @onclick="@(() => SelectResult(item))" @onkeyup="((e) => HandleKeyUpOnSuggestion(e,item))">
                    @if (ResultTemplate != null)
                    {
                        @ResultTemplate(item)
                    }
                </div>
            }
        </div>
    }
    else if (ShowNotFound())
    {
        <div class="blazored-typeahead__results">
            @if (NotFoundTemplate != null)
            {
                <div class="blazored-typeahead__notfound">
                    @NotFoundTemplate
                </div>
            }
            else
            {
                <div class="blazored-typeahead__notfound">
                    No Results Found
                </div>
            }
        </div>
    }
</div>
@code{
    [Parameter] public string Placeholder {get;set;}
    [Parameter] public TItem Value {get;set;}
    [Parameter] public EventCallback<TItem> ValueChanged {get;set;}
    [Parameter] public Func<string, Task<IEnumerable<TItem>>> SearchMethod {get;set;}
    [Parameter] public RenderFragment NotFoundTemplate {get;set;}
    [Parameter] public RenderFragment <TItem> ResultTemplate {get;set;}
    [Parameter] public RenderFragment<TItem> SelectedTemplate {get;set;}
    [Parameter] public RenderFragment FooterTemplate {get;set;}
    [Parameter] public int MinimumLength {get;set;} =1;
    [Parameter] public int Debounce {get;set;} = 300;
    [Parameter] public int MaximumSuggestions {get;set;} = 25;
    [Parameter] public bool DisplayClear {get;set;} = true;

    protected bool IsSearching {get; private set;} = false;
    protected bool IsShowingSuggestions {get; private set;} = false;
    protected bool IsShowingSearchbar {get; private set;} = true;
    protected bool IsShowingMask {get; private set;} = false;
    protected TItem[] Suggestions {get;set;} = new TItem[0];
    protected string SearchText
    {
        get => _searchText;
        set
        {
           _searchText = value;
           if(value.Length == 0)
           {
               _debounceTimer.Stop();
               Suggestions = new TItem[0];
           }
           else if (value.Length >= MinimumLength)
           {
               _debounceTimer.Stop();
               _debounceTimer.Start();
           } 
        }
    }

    protected ElementReference searchInput;
    protected ElementReference typeahead;

    private Timer _debounceTimer;
    private string _searchText = string.Empty;

    protected override void OnInitialized()
    {
        if (SearchMethod == null)
        {
            throw new InvalidOperationException ($"{GetType ()} requires a {nameof(SearchMethod)} parameter.");
        }

        if(ResultTemplate == null)
        {
            throw new InvalidOperationException($"{GetType ()} requires a {nameof (ResultTemplate)} parameter.");
        }

        _debounceTimer = new Timer();
        _debounceTimer.Interval = Debounce;
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += Search;
        
        Initialize();
    }
    protected override void OnParametersSet()
    {
        Initialize();
    }

    private void Initialize()
    {
        IsShowingSuggestions = false;
        if (Value == null)
        {
            IsShowingMask = false;
            IsShowingSearchbar =true;
        }
        else{
            IsShowingSearchbar = false;
            IsShowingMask = true;
        }
    }

    protected void HandleClickOnMask()
    {
        IsShowingMask = false;
        IsShowingSearchbar = true;
    }
    protected async Task ShowMaximumSuggestions()
    {
        IsShowingSuggestions = !IsShowingSuggestions;

        if(IsShowingSuggestions)
        {
            SearchText = "";
            IsSearching = true;
            await InvokeAsync (StateHasChanged);

            Suggestions = (await SearchMethod?.Invoke(_searchText)).Take (MaximumSuggestions).ToArray();

            IsSearching = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected void ShowSuggestions()
    {
        if(Suggestions.Any())
        {
            IsShowingSuggestions = true;
        }
    }

    protected async Task HandleKeyUpOnSuggestion (KeyboardEventArgs args, TItem item)
    {
        //Maybe on any key except Tab and Enter, continue the typing option.
        switch (args.Key)
        {
            case "Enter":
                await SelectResult(item);
                break;
            case "Escape":
            case "Backspace":
            case "Delete":
                Initialize();
                break;
            default:
                break;
        }
    }

    protected async Task HandleKeyUpOnShowMaximum (KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            await ShowMaximumSuggestions();
    }

    protected string GetSelectedSuggestionClass(TItem item)
    {
        if (Value == null)
            return null;
        if (Value.Equals(item))
            return "blazored-typeahead__result-selected";
        return null;
    }

    protected async void Search (Object source, ElapsedEventArgs e)
    {
        IsSearching = true;
        await InvokeAsync (StateHasChanged);
        Suggestions = (await SearchMethod?.Invoke(_searchText)).Take(MaximumSuggestions).ToArray();
        IsSearching = false;
        IsShowingSuggestions = true;
        await InvokeAsync (StateHasChanged);
    }

    protected async Task SelectResult(TItem item)
    {
        SearchText = "";
        await ValueChanged.InvokeAsync(item);
    }

    protected bool ShouldShowSuggestions()
    {
        return IsShowingSuggestions && Suggestions.Any();
    }

    private bool HasValidSearch => !string.IsNullOrWhiteSpace(SearchText) && SearchText.Length >= MinimumLength;
    private bool IsSearchingOrDebouncing => IsSearching || _debounceTimer.Enabled;

    protected bool ShowNotFound()
    {
        return IsShowingSuggestions && HasValidSearch && !IsSearchingOrDebouncing && !Suggestions.Any();
    }

    protected void OnFocusOut (object sender, EventArgs e)
    {
        Initialize();
        InvokeAsync(StateHasChanged);
    }

    protected void OnEscpae (object sender, EventArgs e)
    {
        Initialize();
        InvokeAsync (StateHasChanged);
    }

    public void Dispose()
    {
        _debounceTimer.Dispose();
    }
}