@typeparam T

<CustomTypeaHead SearchMethod = "@((string value) => SearchMethod(value))" Value="@sampleItem" ValueChanged="@((T item) => ElementoSeleccionado(item))">
    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
</CustomTypeaHead>

<ul class="list-group">
    @foreach (var item in ElementosSeleccionados)
    {
        <li draggable="true" @ondragstart="@(() => HandleDragStart(item))" @ondragover="@(()=>HandleDragOver(item))" class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span @onclick ="@(()=>ElementosSeleccionados.Remove(item))" class="badge badge-primary badge-pill" style="cursor: pointer">X</span>
        </li>
    }
</ul>

@code
{
    [Parameter] public List<T> ElementosSeleccionados {get;set;}= new List<T>();
    [Parameter] public Func<string, Task<IEnumerable<T>>> SearchMethod {get;set;}
    [Parameter] public RenderFragment<T> MyResultTemplate {get;set;}
    [Parameter] public RenderFragment<T> MyListTemplate {get;set;}
    T sampleItem = default(T);
    T itemArrastrado;

    private void HandleDragStart(T item)
    {
        itemArrastrado = item;
    }

    private void HandleDragOver (T item)
    {
        if (!item.Equals(itemArrastrado))
        {
            var indiceElementoArrastrado = ElementosSeleccionados.IndexOf(itemArrastrado);
            var indiceElemento = ElementosSeleccionados.IndexOf(item);
            ElementosSeleccionados[indiceElemento] = itemArrastrado;
            ElementosSeleccionados[indiceElementoArrastrado] = item;
        }
    }

    private void ElementoSeleccionado(T item)
    {
        if(!ElementosSeleccionados.Any(x=> x.Equals (item)))
        {
            ElementosSeleccionados.Add(item);
        }
        sampleItem = default(T);
    }
}